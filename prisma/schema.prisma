// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id             String   @id @default(uuid())
  instance_id    Int      @default(autoincrement())
  name           String
  address        String
  created_at     DateTime @default(now())
  store_types_id String

  Products          Product[]
  StoreUsers        StoreUsers[]
  ProductCategories ProductCategories[]
  StoreType         StoreTypes          @relation(fields: [store_types_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Cart {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  instance_id Int      @default(autoincrement())
  user_id     String

  Orders       Order[]
  CartProducts CartProducts[]
  User         User           @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Order {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  instance_id Int      @default(autoincrement())
  cart_id     String

  Cart Cart @relation(fields: [cart_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Product {
  id                  String   @id @default(uuid())
  instance_id         Int      @default(autoincrement())
  store_id            String
  name                String
  quantity            Int
  created_at          DateTime @default(now())
  description         String?
  default_price       Float
  type                String?
  product_category_id String?
  total_sold          Int

  ProductVariants ProductVariants[]
  ProductPrices   ProductPrices[]
  CartProducts    CartProducts[]

  Store             Store              @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ProductCategories ProductCategories? @relation(fields: [product_category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model ProductPrices {
  id              String   @id @default(uuid())
  instance_id     Int      @default(autoincrement())
  price           Float
  created_at      DateTime @default(now())
  product_id      String
  product_size_id String

  Product     Product      @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  ProductSize ProductSizes @relation(fields: [product_size_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model ProductSizes {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  instance_id        Int      @default(autoincrement())
  price              Float
  product_variant_id String

  ProductPrices  ProductPrices[]
  ProductVariant ProductVariants @relation(fields: [product_variant_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model ProductVariants {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  instance_id Int      @default(autoincrement())
  product_id  String
  name        String
  quantity    Int

  ProductSizes ProductSizes[]
  Product      Product        @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model CartProducts {
  id          String   @id @default(uuid())
  instance_id Int      @default(autoincrement())
  cart_id     String
  product_id  String
  created_at  DateTime @default(now())

  Cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Product Product @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Roles {
  id          String   @id @default(uuid())
  instance_id Int      @default(autoincrement())
  created_at  DateTime @default(now())
  role        String

  StoreUsers StoreUsers[]
}

model ProductCategories {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  instance_id Int      @default(autoincrement())
  name        String
  store_id    String

  Products Product[]
  Store    Store     @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model StoreUsers {
  id          String   @id @default(uuid())
  instance_id Int      @default(autoincrement())
  user_id     String
  store_id    String
  created_at  DateTime @default(now())
  role_id     String

  User  User  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Store Store @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Role  Roles @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model StoreTypes {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  instance_id Int      @default(autoincrement())
  name        String

  Stores Store[]
}

// ------------------------ AuthJs schema ------------------------
// NOTE: name and (first_name, last_name) exist togethere because
// some providers like github only has a name field meaning
// the first and last name are merged together in the name field.
model User {
  id            String          @id @default(cuid())
  name          String?
  first_name    String?
  last_name     String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cart          Cart[]
  StoreUsers    StoreUsers[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
